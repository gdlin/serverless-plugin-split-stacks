service: split-stack-test
provider:
  name: aws
  runtime: nodejs12.x

plugins:
  - ../..

custom:
  splitStacks:
    perType: true
    perFunction: false
  alerts:
    stages:
      - dev
    topics:
        alarm: "foo"
    definitions:
      functionErrors:
        threshold: 5
      functionThrottles:
        threshold: 10
    function:
      - functionErrors
      - functionThrottles

functions:
  a:
    handler: handlers.a
    role: customRole
    events:
      - http:
          path: /
          method: GET
  b:
    handler: handlers.b
    events:
      - s3: split-stacks-test-${self:provider.stage}-abc
  c:
    handler: handlers.a
    role: customRole
    events:
      - http:
          path: /
          method: PUT

resources:
  Conditions:
    TrueCondition:
      Fn::Equals:
        - foo
        - foo
    FalseCondition:
      Fn::Equals:
        - foo
        - bar

  Resources:
    SomePermission:
      Type: AWS::Lambda::Permission
      Condition: TrueCondition
      Properties:
        FunctionName:
          Ref: BLambdaFunction
        Action: lambda:InvokeFunction
        Principal:
          Fn::Join:
            - ""
            - - "s3."
              - Ref:
                  AWS::URLSuffix
        SourceArn:
          Fn::GetAtt:
            - ServerlessDeploymentBucket
            - Arn

    SomeOtherPermission:
      Type: AWS::Lambda::Permission
      Condition: FalseCondition
      Properties:
        FunctionName:
          Ref: BLambdaFunction
        Action: lambda:InvokeFunction
        Principal:
          Fn::Join:
            - ""
            - - "s3."
              - Ref:
                  AWS::URLSuffix
        SourceArn:
          Fn::GetAtt:
            - ServerlessDeploymentBucket
            - Arn

    customRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: role1
        Path: "/"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole

    FunctionAErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "FunctionAErrorAlarm"
        AlarmDescription: "Alarm if the function a produces errors"
        Namespace: "AWS/Lambda"
        MetricName: "Errors"
        Dimensions:
          - Name: "FunctionName"
            Value:
              Ref: ALambdaFunction
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        TreatMissingData: "notBreaching"
        AlarmActions:
          - Ref: AlarmTopic

    FunctionAThrottleAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "FunctionAThrottleAlarm"
        AlarmDescription: "Alarm if the function a is throttled"
        Namespace: "AWS/Lambda"
        MetricName: "Throttles"
        Dimensions:
          - Name: "FunctionName"
            Value:
              Ref: ALambdaFunction
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 10
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        TreatMissingData: "notBreaching"
        AlarmActions:
          - Ref: AlarmTopic

    FunctionBErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "FunctionBErrorAlarm"
        AlarmDescription: "Alarm if the function b produces errors"
        Namespace: "AWS/Lambda"
        MetricName: "Errors"
        Dimensions:
          - Name: "FunctionName"
            Value:
              Ref: BLambdaFunction
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        TreatMissingData: "notBreaching"
        AlarmActions:
          - Ref: AlarmTopic

    FunctionBThrottleAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "FunctionBThrottleAlarm"
        AlarmDescription: "Alarm if the function b is throttled"
        Namespace: "AWS/Lambda"
        MetricName: "Throttles"
        Dimensions:
          - Name: "FunctionName"
            Value:
              Ref: BLambdaFunction
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 10
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        TreatMissingData: "notBreaching"
        AlarmActions:
          - Ref: AlarmTopic

    FunctionCErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "FunctionCErrorAlarm"
        AlarmDescription: "Alarm if the function c produces errors"
        Namespace: "AWS/Lambda"
        MetricName: "Errors"
        Dimensions:
          - Name: "FunctionName"
            Value:
              Ref: CLambdaFunction
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        TreatMissingData: "notBreaching"
        AlarmActions:
          - Ref: AlarmTopic

    FunctionCThrottleAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "FunctionCThrottleAlarm"
        AlarmDescription: "Alarm if the function c is throttled"
        Namespace: "AWS/Lambda"
        MetricName: "Throttles"
        Dimensions:
          - Name: "FunctionName"
            Value:
              Ref: CLambdaFunction
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 10
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        TreatMissingData: "notBreaching"
        AlarmActions:
          - Ref: AlarmTopic

    AlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: foo
